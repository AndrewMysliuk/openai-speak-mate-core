{
  "id": "frontend_event_loop",
  "title": "JavaScript Event Loop",
  "description": "Practice explaining how the JavaScript event loop works and how it affects asynchronous code.",
  "level": "B2",
  "user_content": {
    "goals": [
      {
        "phrase": "Describe what the event loop is in simple terms",
        "translation": {
          "uk": "Описати, що таке event loop простими словами"
        }
      },
      {
        "phrase": "Explain how JavaScript handles asynchronous code like setTimeout or Promises",
        "translation": {
          "uk": "Пояснити, як JavaScript обробляє асинхронний код, наприклад setTimeout або Promises"
        }
      },
      {
        "phrase": "Give an example where understanding the event loop helped avoid a bug or unexpected behavior",
        "translation": {
          "uk": "Навести приклад, де розуміння event loop допомогло уникнути помилки або неочікуваної поведінки"
        }
      }
    ],
    "dictionary": [
      {
        "word": "call stack",
        "translation": { "uk": "стек викликів" },
        "meaning": "The structure that keeps track of function calls in JavaScript"
      },
      {
        "word": "callback queue",
        "translation": { "uk": "черга зворотних викликів" },
        "meaning": "Where functions like setTimeout are placed to wait their turn"
      },
      {
        "word": "microtasks",
        "translation": { "uk": "мікрозавдання (microtasks)" },
        "meaning": "Tasks from Promises and mutation observers that run before other callbacks"
      },
      {
        "word": "setTimeout",
        "translation": { "uk": "setTimeout" },
        "meaning": "A method that schedules a callback to run after a delay"
      },
      {
        "word": "Promise",
        "translation": { "uk": "обіцянка (Promise)" },
        "meaning": "An object that represents a value that might be available later"
      }
    ],
    "phrases": [
      {
        "phrase": "The event loop manages how JavaScript handles asynchronous code.",
        "translation": {
          "uk": "Event loop керує тим, як JavaScript обробляє асинхронний код."
        },
        "meaning": "Used to start a high-level explanation"
      },
      {
        "phrase": "JavaScript is single-threaded, so the event loop helps it stay non-blocking.",
        "translation": {
          "uk": "JavaScript однопотоковий, тому event loop допомагає уникнути блокувань."
        },
        "meaning": "Explains why the loop exists"
      },
      {
        "phrase": "Promises and async/await are handled as microtasks in the event loop.",
        "translation": {
          "uk": "Promises і async/await обробляються як мікрозавдання в event loop."
        },
        "meaning": "Clarifies how modern async patterns work"
      },
      {
        "phrase": "If you don’t understand the event loop, setTimeout can behave unexpectedly.",
        "translation": {
          "uk": "Якщо не розуміти event loop, setTimeout може поводитись неочікувано."
        },
        "meaning": "Used to describe why this knowledge matters"
      }
    ]
  },
  "model_behavior": {
    "prompt": "You are a technical interviewer asking the candidate to explain the JavaScript event loop. Focus on their ability to describe asynchronous behavior clearly.",
    "scenario": {
      "setting": "Technical interview",
      "situation": "You are checking how well the candidate understands the event loop and asynchronous behavior in JavaScript",
      "goal": "Help the user talk clearly about the event loop and why it matters in frontend code",
      "steps": ["Can you describe what the event loop is and why it’s important?", "How does JavaScript handle asynchronous functions like setTimeout or Promises?"],
      "optional_steps": [
        "What’s the difference between the call stack and the callback queue?",
        "What are microtasks, and how do they relate to Promises?",
        "How does async/await work with the event loop?",
        "Can you describe a real example of a bug caused by misunderstanding the event loop?",
        "Why do some functions run later than others, even with 0ms delay?",
        "What would happen if the call stack is full when a callback is ready?"
      ]
    }
  },
  "meta": {
    "estimated_duration_minutes": 6,
    "max_turns": 10,
    "question_count_range": {
      "min": 2,
      "max": 4
    },
    "model_end_behavior": "Great job! You’ve finished this scenario. Feel free to check the analysis and see how you performed.",
    "target_language": "English",
    "explanation_language": "Ukrainian"
  }
}
